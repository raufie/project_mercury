// Fetch cycle

CON-0x00 = PCw MARe
CON-0x01 = MARo PCe
CON-0x02 = MARo MDRe MDRlr
CON-0X03 = MDRo MDRob IRe

// LDA address, 0x3a 0xLL 0xHH, load stuff on 0xHHLL onto A

OP-0x3a = 0x04

// Get the first byte after OP
CON-0x04 = PCw MARe
CON-0x05 = MARo PCe
CON-0x06 = MARo MDRe MDRlr
CON-0x07 = MDRo MDRob Te
// Get the second byte 
CON-0x08 = PCw MARe
CON-0x09 = MARo PCe
CON-0x0a = MARo MDRe MDRlr
CON-0x0b = MDRo MDRob MARHw
CON-0x0c = To MARLw
CON-0x0d = MARo MDRe MDRlr
CON-0x0e = MDRo MDRob Ae
CON-0x0f = RESET_CYCLE


// MOV A, B : Move to A the contents of B

OP-78 = 0x10

CON-0x10 = Bo Ae
CON-0x11 = RESET_CYCLE

// MOV A, C

OP-79 = 0x12
CON-0x12 = Co Ae
CON-0x13 = RESET_CYCLE

// MOV B, A

OP-47 = 0x14
CON-0x14 = Be Ao
CON-0x15 = RESET_CYCLE

// MOV B, C

OP-41 = 0x16
CON-0x16 = Be Co
CON-0x17 = RESET_CYCLE

// MOV C, A

OP-4f = 0x18
CON-0x18 = Ce Ao
CON-0x19 = RESET_CYCLE

// MOVE C, B

OP-48 = 0x1a
CON-0x1a = Ce Bo
CON-0x1b = RESET_CYCLE

// *** MOVE IMMEDIATES

// MVI A, byte

OP-3E = 0x1c

CON-0x1c = PCw MARe
CON-0x1d = MARo PCe
CON-0x1e = MARo MDRe MDRlr

CON-0x1f = MDRo MDRob Ae
CON-0x20 = RESET_CYCLE

// MVI B, byte

OP-06 = 0x21
CON-0x21 = PCw MARe
CON-0x22 = MARo PCe
CON-0x23 = MARo MDRe MDRlr

CON-0x24 = MDRo MDRob Be
CON-0x25 = RESET_CYCLE

// MVI C, byte

OP-0E = 0x26
CON-0x26 = PCw MARe
CON-0x27 = MARo PCe
CON-0x28 = MARo MDRe MDRlr

CON-0x29 = MDRo MDRob Ce
CON-0x2a = RESET_CYCLE

// STA address : store the accumulator on the address

OP-0x32 = 0x2b

// Get the first byte after OP
CON-0x2b = PCw MARe
CON-0x2c = MARo PCe
CON-0x2d = MARo MDRe MDRlr
CON-0x2e = MDRo MDRob Te
// Get the second byte 
CON-0x2f = PCw MARe
CON-0x30 = MARo PCe
CON-0x31 = MARo MDRe MDRlr
CON-0x32 = MDRo MDRob MARHw
CON-0x33 = To MARLw
// LOAD MDR WITH A
CON-0x34 = MARo MDRe MDRlb Ao
CON-0x35 = MARo MDRo MDRor RAMe
CON-0x36 = RESET_CYCLE

// ADD B
OP-0x80 = 0x37
CON-0x37 = Bo Te
CON-0x38 = ALU_ADD ALU_WRITE_ENABLE Ae
CON-0x39 = RESET_CYCLE

// ADD C
OP-0x81 = 0x3a
CON-0x3a = Co Te
CON-0x3b = ALU_ADD ALU_WRITE_ENABLE Ae
CON-0x3c = RESET_CYCLE

// ANA B
OP-a0 = 0x3d
CON-0x3d = Bo Te
CON-0x3e = ALU_AND ALU_WRITE_ENABLE Ae
CON-0x3f = RESET_CYCLE

// ANA C
OP-a1 = 0x40
CON-0x40 = Co Te
CON-0x41 = ALU_AND ALU_WRITE_ENABLE Ae
CON-0x42 = RESET_CYCLE

// ANI byte (And immidiate)

OP-e6 = 0x43
CON-0x44 = PCw MARe
CON-0x45 = MARo PCe
CON-0x46 = MARo MDRe MDRlr
CON-0x47 = MDRo MDRob Te
CON-0x48 = ALU_AND ALU_WRITE_ENABLE Ae
CON-0x49 = RESET_CYCLE

// CMA
OP-2f = 0x4a
CON-0x4a = Ao Te
CON-0x4b = ALU_NOT ALU_WRITE_ENABLE Ae
CON-0x4c = RESET_CYCLE

// DCR A
OP-3d = 0x4d
CON-0x4d = Ao Te
CON-0x4e = ALU_DCR ALU_WRITE_ENABLE Ae
CON-0x4f = RESET_CYCLE

// DCR B
OP-05 = 0x5a
CON-0x5a = Bo Te
CON-0x5b = ALU_DCR ALU_WRITE_ENABLE Be
CON-0x5c = RESET_CYCLE

// DCR C

OP-0d = 0x5d
CON-0x5d = Co Te
CON-0x5e = ALU_DCR ALU_WRITE_ENABLE Ce
CON-0x5f = RESET_CYCLE

// INR A

OP-3c = 0x60
CON-0x60 = Ao Te
CON-0x61 = ALU_INR ALU_WRITE_ENABLE Ae
CON-0x62 = RESET_CYCLE

// INR B

OP-04 = 0x63
CON-0x63 = Bo Te
CON-0x64 = ALU_INR ALU_WRITE_ENABLE Be
CON-0x65 = RESET_CYCLE

// INR C

OP-0c = 0x66
CON-0x66 = Co Te
CON-0x67 = ALU_INR ALU_WRITE_ENABLE Ce
CON-0x68 = RESET_CYCLE

// ORA B
OP-0xb0 = 0x69
CON-0x69 = Bo Te
CON-0x6a = ALU_OR ALU_WRITE_ENABLE Ae
CON-0x6b = RESET_CYCLE

// ORA C
OP-0xb1 = 0x6c
CON-0x6c = Co Te
CON-0x6d = ALU_OR ALU_WRITE_ENABLE Ae
CON-0x6e = RESET_CYCLE

// ORI byte (OR immidiate)

OP-f6 = 0x6f
CON-0x6f = PCw MARe
CON-0x70 = MARo PCe
CON-0x71 = MARo MDRe MDRlr
CON-0x72 = MDRo MDRob Te
CON-0x73 = ALU_OR ALU_WRITE_ENABLE Ae
CON-0x74 = RESET_CYCLE


// SUB B
OP-0x90 = 0x75
CON-0x75 = Bo Te
CON-0x76 = ALU_SUB ALU_WRITE_ENABLE Ae
CON-0x77 = RESET_CYCLE

// SUB C
OP-0x91 = 0x78
CON-0x78 = Co Te
CON-0x79 = ALU_SUB ALU_WRITE_ENABLE Ae
CON-0x7a = RESET_CYCLE

// XRA B
OP-0xa8 = 0x7b
CON-0x7b = Bo Te
CON-0x7c = ALU_XOR ALU_WRITE_ENABLE Ae
CON-0x7d = RESET_CYCLE

// XRA C

OP-0xa9 = 0x7e
CON-0x7e = Co Te
CON-0x7f = ALU_XOR ALU_WRITE_ENABLE Ae
CON-0x80 = RESET_CYCLE

// XRI byte

OP-ee = 0x81
CON-0x81 = PCw MARe
CON-0x82 = MARo PCe
CON-0x83 = MARo MDRe MDRlr
CON-0x84 = MDRo MDRob Te
CON-0x85 = ALU_XOR ALU_WRITE_ENABLE Ae
CON-0x86 = RESET_CYCLE

// RAL
OP-0x17 = 0x87
CON-0x87 = Ao Te
CON-0x88 = ALU_RAL ALU_WRITE_ENABLE Ae
CON-0x89 = RESET_CYCLE
// RAR
OP-1f = 0x8a
CON-0x8a = Ao Te
CON-0x8b = ALU_RAR ALU_WRITE_ENABLE Ae
CON-0x8c = RESET_CYCLE

// JMP address
// load PC with what ever is at address
OP-0xc3 = 0x8d

CON-0x8d = PCw MARe
CON-0x8e = MARo PCe
CON-0x8f = MARo MDRe MDRlr
CON-0x90 = MDRo MDRob Te
// Get the second byte 
CON-0x91 = PCw MARe
CON-0x92 = MARo PCe
CON-0x93 = MARo MDRe MDRlr
CON-0x94 = MDRo MDRob MARHw
CON-0x95 = To MARLw
CON-0x96 = MARob PCl
CON-0x97 = RESET_CYCLE

// JM: Jump if minus, reset on non negative

OP-0xfa = 0x98
CON-0x98 = PCw MARe
CON-0x99 = MARo PCe
CON-0x9a = MARo MDRe MDRlr
CON-0x9b = MDRo MDRob Te
// Get the second byte 
CON-0x9c = PCw MARe
CON-0x9d = MARo PCe
CON-0x9e = RESET_CYCLE_ON_NON_NEGATIVE
CON-0x9f = MARo MDRe MDRlr
CON-0xa0 = MDRo MDRob MARHw
CON-0xa1 = To MARLw
CON-0xa2 = MARob PCl
CON-0xa3 = RESET_CYCLE

// JNZ: Jump if non zero, reset on zero

OP-0xc2 = 0xa4
CON-0xa4 = PCw MARe
CON-0xa5 = MARo PCe
CON-0xa6 = MARo MDRe MDRlr
CON-0xa7 = MDRo MDRob Te
// Get the second byte 
CON-0xa8 = PCw MARe
CON-0xa9 = MARo PCe
CON-0xaa = RESET_CYCLE_ON_ZERO
CON-0xab = MARo MDRe MDRlr
CON-0xac = MDRo MDRob MARHw
CON-0xad = To MARLw
CON-0xae = MARob PCl
CON-0xaf = RESET_CYCLE

// JZ address: jump if zero, reset on non-zero

OP-0xca = 0xb0
CON-0xb0 = PCw MARe
CON-0xb1 = MARo PCe
CON-0xb2 = MARo MDRe MDRlr
CON-0xb3 = MDRo MDRob Te
// Get the second byte 
CON-0xb4 = PCw MARe
CON-0xb5 = MARo PCe
CON-0xb6 = RESET_CYCLE_ON_NON_ZERO
CON-0xb7 = MARo MDRe MDRlr
CON-0xb8 = MDRo MDRob MARHw
CON-0xb9 = To MARLw
CON-0xba = MARob PCl
CON-0xbc = RESET_CYCLE

// HALT
OP-0x76 = 0xbd
CON-0xbd = HLT

// ----- CALL address

OP-0xcd = 0xbe

CON-0xbe = PCw MARe
CON-0xbf = MARo PCe
CON-0xc0 = MARo MDRe MDRlr
CON-0xc1 = MDRo MDRob Te
// Get the second byte 
CON-0xc2 = PCw MARe
CON-0xc3 = MARo PCe
CON-0xc4 = MARo MDRe MDRlr
CON-0xc5 = MDRo MDRob MARHw
CON-0xc6 = To MARLw
CON-0xc7 = REFe PCw
CON-0xc8 = PCe
CON-0xc9 = MARob PCl
CON-0xca = RESET_CYCLE


// --- RET
OP-0xc9 = 0xcb 
CON-0xcb = REFo PCl
CON-0xcc = RESET_CYCLE


// in 0xHH

OP-0xdb = 0xcd
// put the 0xHH on the bus
CON-0xcd = PCw MARe
CON-0xce = MARo PCe
CON-0xcf = MARo MDRe MDRlr
CON-0xd0 = MDRo MDRob INce
CON-0xd1 = INo Ae
CON-0xd2 = INack
CON-0xd3 = RESET_CYCLE

OP-0xd3 = 0xd4
CON-0xd4 = Ao OUT3_e
CON-0xd5 = RESET_CYCLE

//  NO-OP (ff is equal to 0 always)
OP-0x00 = 0xff
CON-0xff = RESET_CYCLE

